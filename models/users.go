package models

import (
	"errors"
	"fmt"

	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/postgres"
	"gitlab.com/michellejae/lenslocked.com/hash"
	"gitlab.com/michellejae/lenslocked.com/rand"
	"golang.org/x/crypto/bcrypt"
)

var (
	// return when a resource cannot be found in DB
	ErrNotFound = errors.New("models: resource not found")

	// returned when an invalid id is provided to a mehod like delete
	ErrInvalidID = errors.New("models: id provided was invalid")
	// return when authentenicate gets incorrect password
	ErrInvalidPassword = errors.New("models: incorrect password provided")
)

const userPwPepper = "booopity-beep-berp"
const hmacSecretKey = "secret-hmac-key"

// how we connect to DB
func NewUserService(connectionInfo string) (*UserService, error) {
	db, err := gorm.Open("postgres", connectionInfo)
	if err != nil {
		return nil, err
	}
	db.LogMode(true)
	hmac := hash.NewHmac(hmacSecretKey)
	return &UserService{
		db:   db,
		hmac: hmac,
	}, nil
}

// access gorm to give acces to DB model
// access hmac that we wrote to hash tokens
type UserService struct {
	db   *gorm.DB
	hmac hash.HMAC
}

// ByID will look up a user with provided ID.
// If the user is found, we will return a nil error
// If the user is not found, we will return ErrNotFound
//If there is another error, we will return an error with more information
// about what went wrong. This may not be an error generated by the model package

// as a general rule, any error but ErrNotFound should probaly result in a 500 error
func (us *UserService) ByID(id uint) (*User, error) {
	var user User
	db := us.db.Where("id = ?", id)
	err := first(db, &user)
	return &user, err
}

// same as above but byEMAIL
func (us *UserService) ByEmail(email string) (*User, error) {
	// this is the user where we play the return from the db
	var user User
	db := us.db.Where("email = ?", email)
	err := first(db, &user)
	return &user, err
}

// looks up a user with the given remember token and retunr thats user
// this method will handle hashing the token for us
// errors are the same as byEmail
func (us *UserService) ByRemember(token string) (*User, error) {

	var user User
	rememberHash := us.hmac.Hash(token)
	fmt.Println("HERERRE", rememberHash)
	// query has to use remember_hash even though we save it as RememberHash down below
	err := first(us.db.Where("remember_hash = ?", rememberHash), &user)
	if err != nil {
		return nil, err
	}

	return &user, nil

}

// can be used to authenticate a user with the provided email address and password
// if the email provided is invalid this will return nil, ErrNotFound
// if the password provided is invalid this will return nil, ErrInvalidPassword
// if both are valid, will return user, nil
// if both are invalid will return nil, error
func (us *UserService) Authenticate(email, password string) (*User, error) {
	foundUser, err := us.ByEmail(email)
	if err != nil {
		return nil, err
	}

	err = bcrypt.CompareHashAndPassword([]byte(foundUser.PasswordHash), []byte(password+userPwPepper))
	if err != nil {
		switch err {
		case bcrypt.ErrMismatchedHashAndPassword:
			return nil, ErrInvalidPassword
		default:
			return nil, err
		}

	}
	return foundUser, nil
}

// first will query using provided gorm.db and will
// get first item return and place it into dst
// if nothing is return (or fround in query) it will return err not found
func first(db *gorm.DB, dst interface{}) error {
	err := db.First(dst).Error
	if err == gorm.ErrRecordNotFound {
		return ErrNotFound
	}
	return err
}

//Creat provided user and backfill data like the ID, CreatedAt and UpdatedAt fields
func (us *UserService) Create(user *User) error {
	pwBytes := []byte(user.Password + userPwPepper)
	hashedBytes, err := bcrypt.GenerateFromPassword(pwBytes, bcrypt.DefaultCost)
	if err != nil {
		return err
	}
	user.PasswordHash = string(hashedBytes)
	user.Password = ""

	if user.Remember == "" {
		token, err := rand.RememberToken()
		if err != nil {
			return err
		}
		user.Remember = token
	}

	user.RememberHash = us.hmac.Hash(user.Remember)

	return us.db.Create(user).Error
}

// will update the provied user with the provided user object
// note that you ahve to provide ALL fields whether their data is updatd or not
// ie if the email is staying the same and you don't provide it, it will delete
func (us *UserService) Update(user *User) error {
	if user.Remember != "" {
		user.RememberHash = us.hmac.Hash(user.Remember)
	}
	return us.db.Save(user).Error
}

// will delete the user with the provided ID
func (us *UserService) Delete(id uint) error {
	if id == 0 {
		return ErrInvalidID
	}

	// have to actually specify model to get acces to gorm.Model to get the ID
	user := User{Model: gorm.Model{ID: id}}
	return us.db.Delete(&user).Error
}

// closes the UserService DB connection
func (us *UserService) Close() error {
	return us.db.Close()
}

// method only used in development to reset database just to make sure we are starting fresh
// drops user table and rebuilds it
func (us *UserService) DestructiveReset() error {
	if err := us.db.DropTableIfExists(&User{}).Error; err != nil {
		return err
	}
	return us.AutoMigrate()

}

// Automigrate will attempt to automatiaclly migrate the users table
func (us *UserService) AutoMigrate() error {
	if err := us.db.AutoMigrate(&User{}).Error; err != nil {
		return err
	}
	return nil
}

type User struct {
	gorm.Model
	Name         string
	Email        string `gorm:"not null;unique_index"`
	Password     string `gorm:"-"` //- means ignore this and don't store in db
	PasswordHash string `gorm:"not null"`
	Remember     string `gorm:"-"`
	RememberHash string `gorm:"not null;unique_index"`
}
